Web приложение на базе Angular.js (1 или 2 — не важно) или React.js(+ про react-router знаю, 
но навигация(состояние приложения) своя, по location.hash; redux не нужен), Node.js(+) и MongoDB(+ mongo - ДБ по юзерам, postgre - ДБ по питомцам)
Система управления базой питомцев пользователя (кошки, собаки, попугаи и т.п.)
Требуется реализовать:
- Страницу регистрации пользователя (email, full name, age) с проверкой валидности email –
надо отправить письмо с ссылкой для проверки(+)
- Страница логина. Логин по паре email/password. Пользователь без активации не может
залогиниться(+). Должна содержать форму для сброса пароля (ссылка для смены пароля
отправляется на указаный email)(+ тут по уму можно было redis заюзать, по ссылке хеш передавать, 
у меня в ссылке id юзера, которому нужно сбросить пароль).
- Главная страница, где пользователь видит полный список своих питомцев — таблица.
Должна поддерживать bulk операции (удаление сразу нескольких питомцев будет
достаточно)(+ несколько имен удаляемых питомцев вводятся в одну строку, разделитель любой - регулярка выберет из строки слова). 
Также должна содержать модальное окно редактирование питомца.(+) Должна
поддерживать поиск питомца по имени.(+ подсвечивает строки при наборе в инпут)
- Страница добавления питомца — содержит поля: имя питомца, вид, возраст(+)
Дополнительные требования:
- Все взаимодействие с серверным приложением должно происходить при помощи AJAX
запросов с использованием REST подхода (или GraphQL).(+ вариантов много, тут, как и раньше, использовал axios)
- Графический интерфейс на базе какой-нибудь готовой темы Bootstrap 3, или вообще со
стандартными стилями Бутстрапа.(+ сразу начал переделывать один из бесплатных шаблонов на бутсрапе,
но из-за глючности его css решил его снести и оставить стандартные бутсрап стили)
- Сессия на сервере храниться в redis(+ связка рандомного достаточно большого числа(токена) с id юзера, 
время жизни - 120 секунд), серверное приложение должно быть stateless.(+) (если не
получается настроить redis, то сессию можно хранить в MongoDB)
- Пароль не должен храниться в открытом виде.(+ sha256)
- Идентификатор сессии (token) для клиентского приложения должен храниться в localStorage(+ token - рандомное число 
в 16-ричной системе, типа: 17d36547f66a37)
и передаваться на сервер с каждым запросом (за исключением, естественно, логина и
создания нового юзера)(+ в хедере вида: Authorization: 17d36547f66a37)